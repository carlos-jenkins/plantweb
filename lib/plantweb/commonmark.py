import os

from docutils import transforms, nodes
from recommonmark.states import DummyStateMachine


class CommonmarkCodeDirective(transforms.Transform):
    """Automatically try to transform blocks to sphinx directives.

    This class is designed to handle AST generated by CommonMarkParser.
    """

    def __init__(self, *args, **kwargs):
        transforms.Transform.__init__(self, *args, **kwargs)
        self.reporter = self.document.reporter
        self.config = self.default_config.copy()
        try:
            new_cfg = self.document.settings.env.config.plantweb_recommonmark
            self.config.update(new_cfg)
        except AttributeError:
            pass

    # set to a high priority so it can be applied first for markdown docs
    default_priority = 2
    suffix_set = {'md', 'rst'}

    default_config = {
        'enable_plantuml_code': True,
        'commonmark_suffixes': ['.md'],
    }

    def auto_code_block(self, node):
        """Try to automatically generate nodes for codeblock syntax.

        Parameters
        ----------
        node : nodes.literal_block
            Original codeblock node
        Returns
        -------
        tocnode: docutils node
            The converted toc tree node, None if conversion is not possible.
        """
        assert isinstance(node, nodes.literal_block)
        if 'language' not in node:
            return None
        self.state_machine.reset(self.document,
                                 node.parent,
                                 self.current_level)
        content = node.rawsource.split('\n')
        language = node['language']
        if language == 'plantuml' or language == 'uml':
            if self.config['enable_plantuml_code']:
                return self.state_machine.run_directive(
                    'uml', content=content)
        if language == 'graph':
            if self.config['enable_graph_code']:
                return self.state_machine.run_directive(
                    'graph', content=content)
        if language == 'diagram':
            if self.config['enable_plantuml_code']:
                return self.state_machine.run_directive(
                    'diagram', content=content)
        return None

    def change_node(self, node):
        """Try to find replace node for current node.

        Parameters
        ----------
        node : docutil node
            Node to find replacement for.

        Returns
        -------
        nodes : node or list of node
            The replacement nodes of current node.
            Returns None if no replacement can be found.
        """
        newnode = None
        if isinstance(node, nodes.literal_block):
            newnode = self.auto_code_block(node)
        return newnode

    def traverse(self, node):
        """Traverse the document tree rooted at node.

        node : docutil node
            current root node to traverse
        """
        old_level = self.current_level
        if isinstance(node, nodes.section):
            if 'level' in node:
                self.current_level = node['level']
        to_visit = []
        to_replace = []
        for c in node.children[:]:
            newnode = self.change_node(c)
            if newnode is not None:
                to_replace.append((c, newnode))
            else:
                to_visit.append(c)

        for oldnode, newnodes in to_replace:
            node.replace(oldnode, newnodes)

        for child in to_visit:
            self.traverse(child)
        self.current_level = old_level

    def apply(self):
        """Apply the transformation by configuration."""
        source = self.document['source']

        self.reporter.info('Plantuml Commonmark: %s' % source)

        # only transform markdowns
        if not source.endswith(tuple(self.config['commonmark_suffixes'])):
            return

        self.state_machine = DummyStateMachine()
        self.current_level = 0
        file_dir_relative = os.path.dirname(self.document['source'])
        self.file_dir = os.path.abspath(file_dir_relative)
        self.root_dir = os.path.abspath(self.document.settings.env.srcdir)
        self.traverse(self.document)


def setup(app):
    """
    Setup function that makes this module a Sphinx extension.

    See
    http://www.sphinx-doc.org/en/stable/extdev/appapi.html#sphinx.application.Sphinx.add_config_value
    """

    app.add_transform(CommonmarkCodeDirective)

    # Register the config value to allow to set plantweb defaults in conf.py
    app.add_config_value('plantweb_recommonmark', {}, 'env')


__all__ = [
    'CommonmarkCodeDirective', 'setup',
    ]
